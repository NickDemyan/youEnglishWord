import os
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    Message,
    CallbackQuery,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy import create_engine, Column, Integer, String, Boolean, DateTime, func
from sqlalchemy.orm import sessionmaker, declarative_base
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import asyncio
import random

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)
logger = logging.getLogger(__name__)
logging.getLogger("aiogram").setLevel(logging.WARNING)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (SQLite)
Base = declarative_base()
engine = create_engine('sqlite:///words.db', echo=True)
Session = sessionmaker(bind=engine)
session = Session()

# –ú–æ–¥–µ–ª—å —Å–ª–æ–≤–∞
class Word(Base):
    __tablename__ = 'words'
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer)
    english = Column(String)
    russian = Column(String)
    is_learned = Column(Boolean, default=False)
    next_review = Column(DateTime, default=datetime.now())
    repetition_step = Column(Integer, default=0)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class Form(StatesGroup):
    add_english = State()
    add_russian = State()
    study_word = State()
    repeat_all = State()

# ========== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========

def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï")],
            [KeyboardButton(text="–£—á–∏—Ç—å —Å–ª–æ–≤–∞ üìñ"), KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä")],
            [KeyboardButton(text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–∞ üîÑ"), KeyboardButton(text="–ü–æ–º–æ—â—å ‚ùì")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )

def get_cancel_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )

def get_study_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data="show_answer")],
            [InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ", callback_data="next_word")]
        ]
    )

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==========

@dp.message(Command('start'))
async def start(message: Message):
    user_id = message.from_user.id
    
    if not session.query(Word).filter_by(user_id=user_id).first():
        new_word = Word(
            user_id=user_id,
            english="welcome",
            russian="–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"
        )
        session.add(new_word)
        session.commit()
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
    
    await message.answer(
        "üìö –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞!",
        reply_markup=get_main_keyboard()
    )

@dp.message(Command('help'))
@dp.message(F.text == "–ü–æ–º–æ—â—å ‚ùì")
async def help_command(message: Message):
    await message.answer(
        "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:\n\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ - –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥\n"
        "‚Ä¢ –£—á–∏—Ç—å —Å–ª–æ–≤–∞ - –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–ª–æ–≤ –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É\n"
        "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–∞ - –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–ª–æ–≤ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ\n"
        "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
        reply_markup=get_main_keyboard()
    )

@dp.message(Command('add_word'))
@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï")
async def add_word_start(message: Message, state: FSMContext):
    await state.set_state(Form.add_english)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:",
        reply_markup=get_cancel_keyboard()
    )

@dp.message(Form.add_english)
async def add_english_word(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
    
    existing_word = session.query(Word).filter_by(user_id=message.from_user.id, english=message.text).first()
    if existing_word:
        await message.answer(
            f"‚ùå –°–ª–æ–≤–æ '{message.text}' —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
        return
        
    await state.update_data(english=message.text)
    await state.set_state(Form.add_russian)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–æ–º:",
        reply_markup=get_cancel_keyboard()
    )

@dp.message(Form.add_russian)
async def add_russian_translation(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        return
        
    data = await state.get_data()
    new_word = Word(
        user_id=message.from_user.id,
        english=data['english'],
        russian=message.text
    )
    session.add(new_word)
    session.commit()
    await state.clear()
    await message.answer(
        f"‚úÖ –°–ª–æ–≤–æ '{data['english']}' –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
        reply_markup=get_main_keyboard()
    )

@dp.message(Command('study'))
@dp.message(F.text == "–£—á–∏—Ç—å —Å–ª–æ–≤–∞ üìñ")
async def study_words(message: Message, state: FSMContext):
    user_id = message.from_user.id
    words = session.query(Word).filter(
        Word.user_id == user_id,
        Word.next_review <= datetime.now()
    ).all()
    
    if not words:
        await message.answer(
            "üéâ –ü–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è!",
            reply_markup=get_main_keyboard()
        )
        return
    
    await state.set_state(Form.study_word)
    await state.update_data(words=words, current_word_index=0)
    await send_study_word(message, state)

@dp.message(F.text == "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–∞ üîÑ")
async def repeat_all_words(message: Message, state: FSMContext):
    user_id = message.from_user.id
    words = session.query(Word).filter_by(user_id=user_id).all()
    
    if not words:
        await message.answer(
            "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.",
            reply_markup=get_main_keyboard()
        )
        return
    
    random.shuffle(words)
    await state.set_state(Form.repeat_all)
    await state.update_data(words=words, current_word_index=0)
    await send_study_word(message, state)

async def send_study_word(message: Message, state: FSMContext):
    data = await state.get_data()
    words = data['words']
    current_word_index = data['current_word_index']
    
    if current_word_index >= len(words):
        await message.answer(
            "üèÅ –í—Å–µ —Å–ª–æ–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω—ã!",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
        return
    
    word = words[current_word_index]
    await state.update_data(current_word=word)
    await message.answer(
        f"üìù –°–ª–æ–≤–æ: <b>{word.english}</b>\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
        parse_mode="HTML",
        reply_markup=get_study_keyboard()
    )

@dp.callback_query(Form.study_word, F.data == "show_answer")
@dp.callback_query(Form.repeat_all, F.data == "show_answer")
async def show_answer(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    word = data['current_word']
    
    await callback.message.answer(
        f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥: <b>{word.russian}</b>",
        parse_mode="HTML",
    )
    
    data = await state.get_data()
    words = data['words']
    current_word_index = data['current_word_index'] + 1
    await state.update_data(current_word_index=current_word_index)
    await send_study_word(callback.message, state)

@dp.callback_query(Form.study_word, F.data == "next_word")
@dp.callback_query(Form.repeat_all, F.data == "next_word")
async def next_word(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    words = data['words']
    current_word_index = data['current_word_index'] + 1
    
    if await state.get_state() == Form.study_word:
        word = data['current_word']
        word.repetition_step += 1
        word.next_review = datetime.now() + timedelta(days=2**word.repetition_step)
        session.commit()
    
    await state.update_data(current_word_index=current_word_index)
    await send_study_word(callback.message, state)

@dp.message(Form.study_word)
@dp.message(Form.repeat_all)
async def check_translation(message: Message, state: FSMContext):
    data = await state.get_data()
    word = data['current_word']
    
    if message.text.lower() == word.russian.lower():
        await message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü!")
        if await state.get_state() == Form.study_word:
            word.repetition_step += 1
            word.next_review = datetime.now() + timedelta(days=2**word.repetition_step)
            session.commit()
        
        data = await state.get_data()
        words = data['words']
        current_word_index = data['current_word_index'] + 1
        await state.update_data(current_word_index=current_word_index)
        await send_study_word(message, state)
    else:
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@dp.message(Command('stats'))
@dp.message(F.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä")
async def show_stats(message: Message):
    user_id = message.from_user.id
    total = session.query(Word).filter_by(user_id=user_id).count()
    learned = session.query(Word).filter_by(user_id=user_id, is_learned=True).count()
    
    progress = (learned/total*100) if total > 0 else 0
    
    await message.answer(
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"‚Ä¢ –í—Å–µ–≥–æ —Å–ª–æ–≤: {total}\n"
        f"‚Ä¢ –í—ã—É—á–µ–Ω–æ: {learned}\n"
        f"‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.0f}%\n\n"
        f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
        reply_markup=get_main_keyboard()
    )

@dp.message(Command('cancel'))
async def cancel_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_main_keyboard()
    )

@dp.message()
async def handle_unknown(message: Message):
    await message.answer(
        "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é",
        reply_markup=get_main_keyboard()
    )

# ========== –ü–õ–ê–ù–ò–†–û–í–©–ò–ö ==========

scheduler = AsyncIOScheduler()

async def send_daily_words():
    try:
        users = session.query(Word.user_id).distinct().all()
        
        for (user_id,) in users:
            try:
                words = session.query(Word).filter(
                    Word.user_id == user_id,
                    Word.next_review <= datetime.now()
                ).limit(3).all()
                
                if words:
                    await bot.send_message(
                        user_id,
                        "üìñ –ü–æ—Ä–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–∞!\n–ù–∞–∂–º–∏—Ç–µ '–£—á–∏—Ç—å —Å–ª–æ–≤–∞ üìñ'",
                        reply_markup=get_main_keyboard()
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_daily_words: {e}")

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========

async def on_startup():
    Base.metadata.create_all(engine)
    scheduler.add_job(send_daily_words, 'interval', hours=24)
    scheduler.start()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

async def main():
    await on_startup()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())